// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ORGANIZER //the one who manage the events, allowed to make changes and delete their own events not other organizer's
  CUSTOMER //the one who buy the ticket events, got cash(+points) for it
}

enum Eventtype {
  PAID
  FREE
}

enum TicketCategory {
  REGULAR
  VIP
  DIAMOND
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
}

model User {
  id           String   @id @default(uuid())
  firstname    String
  lastname     String
  username     String
  email        String   @unique
  password     String
  referralcode String   @unique
  referredby   String?
  role         Role?    @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // i have to make this only work if the role is Organizer
  Transaction Transaction[]
  Point       Point[]
  Event       Event[]
  Review      Review[]
  Coupon      Coupon[]
}

model Point {
  id        String   @id @default(uuid())
  amount    Int
  createdAt DateTime @default(now())
  expiredAt DateTime
  userId    String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id        Int      @id @default(autoincrement())
  userId    String
  discount  Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id          String    @id @default(uuid())
  title       String
  //image     String 
  description String
  location    String
  quota       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        Eventtype @default(FREE)
  userId      String

  User          User            @relation(fields: [userId], references: [id])
  Review        Review[]
  Ticket        Ticket[]
  Image         Image[]
  CategoryEvent CategoryEvent[]
}

model Image {
  id      String @id @default(uuid())
  url     String
  eventId String

  Event Event @relation(fields: [eventId], references: [id])
}

model Ticket {
  id              String         @id @default(uuid())
  price           Float
  quantity        Int
  userTicketLimit Int //lupa cara agar per user ada kuota beli
  eventId         String
  ticketCategory  TicketCategory @default(REGULAR)

  Event       Event         @relation(fields: [eventId], references: [id])
  Transaction Transaction[]
}

// buat endpoint query untuk cek if prisma.findmany total max ticket/user - ticket-user
model Review {
  id      String @id @default(uuid())
  text    String
  eventId String
  userId  String

  Event Event @relation(fields: [eventId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

//one to many to user and one to many to events

model Transaction {
  id          String            @id @default(uuid())
  userId      String
  ticketId    String
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  totalPrice  Float
  totalTicket Int

  User   User   @relation(fields: [userId], references: [id])
  Ticket Ticket @relation(fields: [ticketId], references: [id])
}

model Category {
  id            String          @id @default(uuid())
  name          String
  CategoryEvent CategoryEvent[]
}

model CategoryEvent {
  id         String @id @default(uuid())
  categoryId String
  eventId    String

  Category Category @relation(fields: [categoryId], references: [id])
  Event    Event    @relation(fields: [eventId], references: [id])
}
