// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN //the one who manage the website and everything in it
  ORGANIZER //the one who manage the events, allowed to make changes and delete their own events not other organizer's
  PARTICIPANTS //the one who buy the tickets events, got cash(+points) for it
}

model Users {
  id          String   @id @default(uuid())
  username    String
  email       String
  password    String
  referalCode String?
  role        Role?    @default(PARTICIPANTS)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  EventOwn Events? @relation(fields: [eventsId], references: [id])
  eventsId String? @unique
  // i have to make this only work if the role is Organizer
}

model Points {
  id String @id @default(uuid())
}

enum Eventtype {
  PAID
  FREE
}

model Events {
  id          String     @id @default(uuid())
  title       String
  description String
  location    String
  quota       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  type        Eventtype  @default(FREE)
  category    category[]
  Users       Users?
  Reviews     Reviews?
}

// Tambah Discount dan voucher untuk event
model Tickets {
  id       String @id @default(uuid())
  price    Int
  quantity Int
  limit    Int //lupa cara agar per user ada kuota beli
}

// buat endpoint query untuk cek if prisma.findmany total max ticket/user - ticket-user
model Reviews {
  id       String  @id @default(uuid())
  text     String
  events   Events? @relation(fields: [eventsId], references: [id])
  eventsId String? @unique
}

//one to many to user and one to many to events

model Transaction {
  id String @id @default(uuid())
  // transaksi history beli.
}

model category {
  id   String @id @default(uuid())
  name String

  CategoriesConnection Events? @relation(fields: [eventsId], references: [id])
  eventsId             String?
}
